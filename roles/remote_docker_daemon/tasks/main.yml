- name: Assert mandatory variables are defined
  assert:
    that:
      - docker_cert_passphrase is defined
      - docker_data_root is defined
      - client_cert_folder_path is defined

- name: Create the daemon.json file
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: Restart docker

- name: Ensure /var/docker exists
  file:
    path: /var/docker
    state: directory

- name: Move a script to generate certificates
  template:
    src: create_certs.sh.j2
    dest: /var/docker/create_certs.sh
    mode: 'u+x'

- name: Check if certificates already exists
  stat:
    path: /var/docker/cert.pem
  register: certificates_file

- name: Check if certificates are expired
  command: openssl x509 -checkend 86400 -noout -in /var/docker/cert.pem
  register: certificates_expired
  when: certificates_file.stat.exists
  changed_when: False
  failed_when: >
    (certificates_expired.rc != 0 and certificates_expired.rc != 1) or
    (certificates_expired.rc == 1 and certificates_expired.stdout != 'Certificate will expire')

- name: Delete expired certificates
  file:
    path: /var/docker/{{ item }}
    state: absent
  with_items:
    - ca.pem
    - cert.pem
    - key.pem
    - ca.srl
    - ca-key.pem
    - server-cert.pem
    - server-key.pem
  when: certificates_expired.rc == 1 and certificates_expired.stdout == 'Certificate will expire'

- name: Generate the certificates
  command: /var/docker/create_certs.sh
  args:
    creates: /var/docker/ca.pem
  notify: Restart docker

- name: Ensure the folder to store client certs exists
  file:
    path: "{{ client_cert_folder_path }}"
    state: directory
  delegate_to: 127.0.0.1
  run_once: true

- name: Retrieve the client certificates
  fetch:
    src: "/var/docker/{{ item }}"
    dest: "{{ client_cert_folder_path }}/{{ item }}"
    flat: yes
  run_once: true
  with_items:
    - ca.pem
    - cert.pem
    - key.pem

- name: Ensure docker listen on tcp port 4444
  ini_file:
    path: /lib/systemd/system/docker.service
    section: Service
    option: ExecStart
    value: /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock  -H tcp://0.0.0.0:4444
  notify: Restart docker

- name: Force all notified handlers to run
  meta: flush_handlers
